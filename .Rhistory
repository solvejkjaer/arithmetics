mutate(key_answer = if_else(word_type > 2, rand_keys[1], rand_keys[2])) %>%
mutate(word_type = recode(word_type, "1" = "same_word", "2" = "diff_word", "3" = "pseudoword")) %>%
mutate(video_type = recode(video_type, "1" = "mouthing", "2" = "no_mouthing"))
full_rand_test1$stimulus <- html_stimulus(df = full_rand_test1,
html_content = "word",
html_element = "p",
column_names = c("color","fontsize"),
css = c("color", "font-size"),
id = "id")
full_rand_test2$color = 'black'
full_rand_test2$id = "lex_stim"
full_rand_test2$fontsize = "60pt"
full_rand_test2 <- full_rand_test2 %>%
mutate(key_answer = if_else(word_type > 2, rand_keys[1], rand_keys[2])) %>%
mutate(word_type = recode(word_type, "1" = "same_word", "2" = "diff_word", "3" = "pseudoword")) %>%
mutate(video_type = recode(video_type, "1" = "mouthing", "2" = "no_mouthing"))
full_rand_test2$stimulus <- html_stimulus(df = full_rand_test2,
html_content = "word",
html_element = "p",
column_names = c("color","fontsize"),
css = c("color", "font-size"),
id = "id")
##### for testing:
full_rand_test1 = full_rand_test1[1:5,]
full_rand_test2 = full_rand_test2[1:5,]
# create json object from dataframe
vid_json1 <- stimulus_df_to_json(df = full_rand_test1,
stimulus = c("video_source","stimulus"),
data = c("word","key_answer","word_type",
"video","stimulus","video_type"))
vid_json2 <- stimulus_df_to_json(df = full_rand_test2,
stimulus = c("video_source","stimulus"),
data = c("word","key_answer","word_type",
"video","stimulus","video_type"))
# write json object to script
write_to_file(vid_json1, file.path(base_dir, "vid_stimuli1.js"), "vid_stimuli")
write_to_file(vid_json2, file.path(base_dir, "vid_stimuli2.js"), "vid_stimuli")
write("var vid_array = [", file="vid_array1.js")
apply(full_rand_test1[1:nrow(full_rand_test1)-1,], 1, function(x){
write(paste("'",x["video_source"],"',", sep=""), file="vid_array1.js", append=TRUE)
})
write(paste("'",full_rand_test1[nrow(full_rand_test1),"video_source"],"'];", sep=""),
file="vid_array1.js",append = TRUE)
write("var vid_array = [", file="vid_array2.js")
apply(full_rand_test1[1:nrow(full_rand_test1)-1,], 1, function(x){
write(paste("'",x["video_source"],"',", sep=""), file="vid_array2.js", append=TRUE)
})
write(paste("'",full_rand_test1[nrow(full_rand_test1),"video_source"],"'];", sep=""),
file="vid_array2.js",append = TRUE)
# Fix instructions (to align with randomization of response options)
instr_stim = paste("<p>Σας ευχαριστούμε που συμπληρώσατε τη δημογραφική έρευνα.</p>",
"<p>Στη συνέχεια πρόκειται να δείτε ένα βίντεο με κάποιον που νοηματίζει μια λέξη και έπειτα,</p>",
"<p>μια γραπτή λέξη θα εμφανιστεί στην οθόνη σας.</p>",
"<p>Θα θέλαμε να αποφασίσετε όσο πιο γρήγορα μπορείτε, εάν η γραπτή λέξη είναι πραγματική λέξη ή όχι.",
"<p>Πατήστε <b>", rand_keyboard[1],
"</b>στο πληκτρολόγιό σου εάν νομίζετε ότι <b>ΔΕΝ</b> είναι πραγματική λέξη.</p>",
"<p>Πάτησε <b>", rand_keyboard[2],
"</b>στο πληκτρολόγιό σου εάν νομίζετε ότι <b>ΕΙΝΑΙ</b> πραγματική λέξη</p>")
instr_stim_df = data.frame(stimulus = instr_stim)
# create json object from dataframe
instr_json <- stimulus_df_to_json(df = instr_stim_df,
stimulus = "stimulus")
# write json object to script
write_to_file(instr_json, paste0(base_dir, "/instr_text.js"), "instr_text")
full_rand_test1
full_rand_test1$stimulus
is.data.frame(full_rand_test1)
is.data.table(full_rand_test1)
?html_stimulus
FT <- setDT(full_test)
iters <- (dim(FT)[1]/length(video.unique))/2 # split in two cuz we need the full stimuli split in two blocks
# block 1 (80 trials)
full_rand_test1 <- tibble()
for (i in 1:iters) {
sampl = 0
while (sampl == 0) {
temp_idx <- FT[,list(idx=sample(.I,1)),by="video"]$idx
temp_sample <- FT[temp_idx]
if (!any(mapply(identical, head(temp_sample$word, -1), tail(temp_sample$word, -1)))) {
sampl = 1
}
}
full_rand_test1 <- bind_rows(full_rand_test1, temp_sample)
FT <- FT[-temp_idx]
}
# block 2 (80 trials)
full_rand_test2 <- tibble()
for (i in (iters+1):(2*iters)) {
sampl = 0
while (sampl == 0) {
temp_idx <- FT[,list(idx=sample(.I,1)),by="video"]$idx
temp_sample <- FT[temp_idx]
if (!any(mapply(identical, head(temp_sample$word, -1), tail(temp_sample$word, -1)))) {
sampl = 1
}
}
full_rand_test2 <- bind_rows(full_rand_test2, temp_sample)
if (!i == 2*iters) {
FT <- FT[-temp_idx]
}
}
full_rand_test1$color = 'black'
full_rand_test1$id = "lex_stim"
full_rand_test1$fontsize = "60pt"
full_rand_test1 <- full_rand_test1 %>%
mutate(key_answer = if_else(word_type > 2, rand_keys[1], rand_keys[2])) %>%
mutate(word_type = recode(word_type, "1" = "same_word", "2" = "diff_word", "3" = "pseudoword")) %>%
mutate(video_type = recode(video_type, "1" = "mouthing", "2" = "no_mouthing"))
full_rand_test1
full_rand_test1$stimulus <- html_stimulus(df = full_rand_test1,
html_content = "word",
html_element = "p",
column_names = c("color","fontsize"),
css = c("color", "font-size"),
id = "id")
full_rand_test1$stimulus
full_rand_test1[1:10,]
is_tibble(full_rand_test1)
length(full_rand_test1)
dim(full_rand_test1)
full_rand_test1$stimulus <- length(dim(full_rand_test1[1])
)
full_rand_test1$stimulus <- html_stimulus(df = full_rand_test1,
html_content = "word",
html_element = "p",
column_names = c("color","fontsize"),
css = c("color", "font-size"),
id = "id")
full_rand_test1$stimulus
FT <- setDT(full_test)
iters <- (dim(FT)[1]/length(video.unique))/2 # split in two cuz we need the full stimuli split in two blocks
# block 1 (80 trials)
full_rand_test1 <- tibble()
for (i in 1:iters) {
sampl = 0
while (sampl == 0) {
temp_idx <- FT[,list(idx=sample(.I,1)),by="video"]$idx
temp_sample <- FT[temp_idx]
if (!any(mapply(identical, head(temp_sample$word, -1), tail(temp_sample$word, -1)))) {
sampl = 1
}
}
full_rand_test1 <- bind_rows(full_rand_test1, temp_sample)
FT <- FT[-temp_idx]
}
# block 2 (80 trials)
full_rand_test2 <- tibble()
for (i in (iters+1):(2*iters)) {
sampl = 0
while (sampl == 0) {
temp_idx <- FT[,list(idx=sample(.I,1)),by="video"]$idx
temp_sample <- FT[temp_idx]
if (!any(mapply(identical, head(temp_sample$word, -1), tail(temp_sample$word, -1)))) {
sampl = 1
}
}
full_rand_test2 <- bind_rows(full_rand_test2, temp_sample)
if (!i == 2*iters) {
FT <- FT[-temp_idx]
}
}
full_rand_test1$color = 'black'
full_rand_test1$id = "lex_stim"
full_rand_test1$fontsize = "60pt"
full_rand_test1 <- full_rand_test1 %>%
mutate(key_answer = if_else(word_type > 2, rand_keys[1], rand_keys[2])) %>%
mutate(word_type = recode(word_type, "1" = "same_word", "2" = "diff_word", "3" = "pseudoword")) %>%
mutate(video_type = recode(video_type, "1" = "mouthing", "2" = "no_mouthing"))
full_rand_test1$stimulus <- html_stimulus(df = as.data.frame(full_rand_test1),
html_content = "word",
html_element = "p",
column_names = c("color","fontsize"),
css = c("color", "font-size"),
id = "id")
full_rand_test1$stimulus
FT <- setDT(full_test)
iters <- (dim(FT)[1]/length(video.unique))/2 # split in two cuz we need the full stimuli split in two blocks
# block 1 (80 trials)
full_rand_test1 <- tibble()
for (i in 1:iters) {
sampl = 0
while (sampl == 0) {
temp_idx <- FT[,list(idx=sample(.I,1)),by="video"]$idx
temp_sample <- FT[temp_idx]
if (!any(mapply(identical, head(temp_sample$word, -1), tail(temp_sample$word, -1)))) {
sampl = 1
}
}
full_rand_test1 <- bind_rows(full_rand_test1, temp_sample)
FT <- FT[-temp_idx]
}
# block 2 (80 trials)
full_rand_test2 <- tibble()
for (i in (iters+1):(2*iters)) {
sampl = 0
while (sampl == 0) {
temp_idx <- FT[,list(idx=sample(.I,1)),by="video"]$idx
temp_sample <- FT[temp_idx]
if (!any(mapply(identical, head(temp_sample$word, -1), tail(temp_sample$word, -1)))) {
sampl = 1
}
}
full_rand_test2 <- bind_rows(full_rand_test2, temp_sample)
if (!i == 2*iters) {
FT <- FT[-temp_idx]
}
}
full_rand_test1$color = 'black'
full_rand_test1$id = "lex_stim"
full_rand_test1$fontsize = "60pt"
full_rand_test1 <- full_rand_test1 %>%
mutate(key_answer = if_else(word_type > 2, rand_keys[1], rand_keys[2])) %>%
mutate(word_type = recode(word_type, "1" = "same_word", "2" = "diff_word", "3" = "pseudoword")) %>%
mutate(video_type = recode(video_type, "1" = "mouthing", "2" = "no_mouthing"))
full_rand_test1$stimulus <- html_stimulus(df = as.data.frame(full_rand_test1),
html_content = "word",
html_element = "p",
column_names = c("color","fontsize"),
css = c("color", "font-size"),
id = "id")
full_rand_test2$color = 'black'
full_rand_test2$id = "lex_stim"
full_rand_test2$fontsize = "60pt"
full_rand_test2 <- full_rand_test2 %>%
mutate(key_answer = if_else(word_type > 2, rand_keys[1], rand_keys[2])) %>%
mutate(word_type = recode(word_type, "1" = "same_word", "2" = "diff_word", "3" = "pseudoword")) %>%
mutate(video_type = recode(video_type, "1" = "mouthing", "2" = "no_mouthing"))
full_rand_test2$stimulus <- html_stimulus(df = as.data.frame(full_rand_test2),
html_content = "word",
html_element = "p",
column_names = c("color","fontsize"),
css = c("color", "font-size"),
id = "id")
##### for testing:
full_rand_test1 = full_rand_test1[1:5,]
full_rand_test2 = full_rand_test2[1:5,]
# create json object from dataframe
vid_json1 <- stimulus_df_to_json(df = full_rand_test1,
stimulus = c("video_source","stimulus"),
data = c("word","key_answer","word_type",
"video","stimulus","video_type"))
vid_json2 <- stimulus_df_to_json(df = full_rand_test2,
stimulus = c("video_source","stimulus"),
data = c("word","key_answer","word_type",
"video","stimulus","video_type"))
# write json object to script
write_to_file(vid_json1, file.path(base_dir, "vid_stimuli1.js"), "vid_stimuli")
write_to_file(vid_json2, file.path(base_dir, "vid_stimuli2.js"), "vid_stimuli")
write("var vid_array = [", file="vid_array1.js")
apply(full_rand_test1[1:nrow(full_rand_test1)-1,], 1, function(x){
write(paste("'",x["video_source"],"',", sep=""), file="vid_array1.js", append=TRUE)
})
write(paste("'",full_rand_test1[nrow(full_rand_test1),"video_source"],"'];", sep=""),
file="vid_array1.js",append = TRUE)
write("var vid_array = [", file="vid_array2.js")
apply(full_rand_test1[1:nrow(full_rand_test1)-1,], 1, function(x){
write(paste("'",x["video_source"],"',", sep=""), file="vid_array2.js", append=TRUE)
})
write(paste("'",full_rand_test1[nrow(full_rand_test1),"video_source"],"'];", sep=""),
file="vid_array2.js",append = TRUE)
set.seed(912); keys = c("i", "j")
keyboard = c('"I"', '"J"')
randizer = sample(1:length(keys))
rand_keys = keys[randizer]
rand_keyboard = keyboard[randizer]
rand_keyboard
set.seed(912); keys = c("i", "j")
> keyboard = c('"I"', '"J"')
> randizer = sample(1:length(keys))
> rand_keys = keys[randizer]
> rand_keyboard = keyboard[randizer]
> rand_keyboard
set.seed(912); keys = c("i", "j")
> keyboard = c('"I"', '"J"')
> randizer = sample(1:length(keys))
> rand_keys = keys[randizer]
> rand_keyboard = keyboard[randizer]
> rand_keyboard
set.seed(912), keys = c("i", "j")
> keyboard = c('"I"', '"J"')
> randizer = sample(1:length(keys))
> rand_keys = keys[randizer]
> rand_keyboard = keyboard[randizer]
> rand_keyboard
set.seed(912)
keys = c("i", "j")
keyboard = c('"I"', '"J"')
randizer = sample(1:length(keys))
rand_keys = keys[randizer]
rand_keyboard = keyboard[randizer]
rand_keyboard
set.seed(913)
keys = c("i", "j")
keyboard = c('"I"', '"J"')
randizer = sample(1:length(keys))
rand_keys = keys[randizer]
rand_keyboard = keyboard[randizer]
rand_keyboard
library(htmltools)
library(psychTestR)
library(tibble)
library(shiny)
library(jspsychr)
library(dplyr)
library(data.table)
base_dir <- "/srv/shiny-server/GSL-study"
jspsych_dir <- file.path(base_dir, "jspsych-6.3.1")
write_to_file <- function(json_object,file_name,var_name=NULL){
if(is.null(var_name)){
write(json_object, file=file_name)
}else{
write(paste("var ",var_name,"= ", json_object, ";"), file=file_name)
}
}
###############################
# Designing the randomization structure #
###############################
# test setup
keys = c("i", "j")
keyboard = c('"I"', '"J"')
set.seed(NULL)
randizer = sample(1:length(keys))
rand_keys = keys[randizer]
rand_keyboard = keyboard[randizer]
rand_keyboard
library(htmltools)
library(psychTestR)
library(tibble)
library(shiny)
library(jspsychr)
library(dplyr)
library(data.table)
base_dir <- "/srv/shiny-server/GSL-study"
jspsych_dir <- file.path(base_dir, "jspsych-6.3.1")
write_to_file <- function(json_object,file_name,var_name=NULL){
if(is.null(var_name)){
write(json_object, file=file_name)
}else{
write(paste("var ",var_name,"= ", json_object, ";"), file=file_name)
}
}
###############################
# Designing the randomization structure #
###############################
# test setup
keys = c("i", "j")
keyboard = c('"I"', '"J"')
set.seed(NULL)
randizer = sample(1:length(keys))
rand_keys = keys[randizer]
rand_keyboard = keyboard[randizer]
rand_keyboard
install.packages("httpuv")
install.packages("httpuv")
install.packages("httpuv")
library(readxl)
library(data.table)
getwd()
shiny::runApp(".")
install.packages("shiny")
install.packages("psychTestR")
install.packages("devtools")
devtools::install_github("pmcharrison/psychTestR")
library(psychTestR)
shiny::runApp(".")
install.packages("jspsychr")
R.Version()
devtools::install_github("CrumpLab/jspsychr")
library(jspsychr)
library(htmltools)
library(psychTestR)
library(tibble)
library(shiny)
library(jspsychr)
library(dplyr)
library(tidyverse)
library(readxl)
library(data.table)
shiny::runApp(".")
shiny::runApp(".")
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
library(htmltools)
library(psychTestR)
library(tibble)
library(shiny)
library(jspsychr)
library(dplyr)
library(tidyverse)
library(readxl)
library(data.table)
shiny::runApp(".")
library(htmltools)
library(psychTestR)
library(tibble)
library(shiny)
library(jspsychr)
library(dplyr)
library(tidyverse)
library(readxl)
library(data.table)
shiny::runApp(".")
shiny::runApp(".")
library(htmltools)
library(psychTestR)
library(tibble)
library(shiny)
library(jspsychr)
library(dplyr)
library(tidyverse)
library(readxl)
library(data.table)
shiny::runApp(".")
shiny::runApp(".")
jspsych_dir <- file.path(base_dir, "jspsych-6-3-1")
write_to_file <- function(json_object,file_name,var_name=NULL){
if(is.null(var_name)){
write(json_object, file=file_name)
}else{
write(paste("var ",var_name,"= ", json_object), file=file_name)
}
}
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
##Native language
ui_nativelang <- tags$div(
head,
includeScript(file.path(base_dir, "native-language-timeline.js")),
# includeScript(file.path(base_dir, "run-jspsych_full.js")),
includeScript(file.path(base_dir, "run-jspsych.js")),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
nativelang <- page(
ui = ui_nativelang,
label = "nativelang",
get_answer = function(input, ...)
input$jspsych_results,
validate = function(answer, ...)
nchar(answer) > 0L,
save_answer = TRUE
)
shiny::runApp(".")
##elts
elts <- join(
consent,
gender,
demographics,
nativelang,
instr,
math_instr,
test,
# elt_save_results_to_disk(complete = FALSE), # anything that is saved here counts as completed
elt_save_results_to_disk(complete = TRUE),
final
)
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
##elts
elts <- join(
consent,
gender,
demographics,
nativelang,
instr,
math_instr,
test,
# elt_save_results_to_disk(complete = FALSE), # anything that is saved here counts as completed
elt_save_results_to_disk(complete = TRUE),
final
)
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
